<%

require 'cgi'
require 'uri'

begin
  uri = URI.parse(ENV["DATABASE_URL"])
rescue URI::InvalidURIError
  # NOTE: Not specifying the actual DATABASE_URL is intentional --
  # wouldn't be a good idea to declare private stuff in production log files.
  error_message = 'Invalid DATABASE_URL.'
  if ENV['DATABASE_URL'].nil? || ENV['DATABASE_URL'].blank?
    error_message = error_message + '  No DATABASE_URL present'
  end
  LogWrapper.log('ERROR', {'message' => "#{error_message}]", 'method' => 'database.yml load'})
  raise "Invalid DATABASE_URL: [#{error_message}]"
end

raise "No RACK_ENV or RAILS_ENV found" unless ENV["RAILS_ENV"] || ENV["RACK_ENV"]

def attribute(name, value)
  value ? "#{name}: #{value}" : ""
end

adapter = uri.scheme
adapter = "postgresql" if adapter == "postgres"

database = (uri.path || "").split("/")[1]

username = "deepikagonuguntla"
password = "password"

host = uri.host
port = uri.port

params = CGI.parse(uri.query || "")

%>

<%= ENV["RAILS_ENV"] || ENV["RACK_ENV"] %>:
  <%= attribute "adapter",  adapter %>
  <%= attribute "database", database %>
  <%= attribute "username", username %>
  <%= attribute "password", password %>
  <%= attribute "host",     host %>
  <%= attribute "port",     port %>

<% params.each do |key, value| %>
  <%= key %>: <%= value.first %>
<% end %>
